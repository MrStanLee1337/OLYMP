#include <iostream>
#include <utility>
#include <cstdlib>
using namespace std;
template <typename Key, typename Value>
class Treap {
    struct node {
        Value value;
        Key key; 
        int priority;
        node *left=nullptr, *right=nullptr;
        node(Key key, int priority, Value value) : key(key), priority(priority), value(value){}
    };
    node *root=nullptr;
    pair<node*, node*> split(node* t, Key key, bool eq) {
      if (!t) return {nullptr,nullptr};
      if (key > t->key || eq && key == t->key) {
        auto [t1,t2]=split(t->right,key,eq);
        t->right=t1;
        return {t,t2};
      } else {
        auto [t1,t2]=split(t->left,key,eq);
        t->left=t2;
        return {t1,t};
      }
    }
    node* merge(node* t1, node* t2) {
      if(!t2) return t1;
      if(!t1) return t2;
      if (t1->priority > t2->priority) {
        t1->right=merge(t1->right,t2);
        return t1;
      } else {
        t2->left=merge(t1,t2->left);
        return t2;
      }
    }
    void free(node *t) {
      if(!t) return;
      free(t->left);
      free(t->right);
      delete t;
    }

public:
    Treap(){}
    ~Treap() { free(root); }
    bool contains(Key key) {
      node *p = root;
      while(p) { 
        if(p->key == key) return 1;
        else if(p->key > key) p = p->left;
        else p = p->right;
      }
      return 0;
    }
    
    void insert(Key key, Value value) {
        node *m = new node(key,rand(), value);
        auto [t1,t2] = split(root,key,0);
        root = merge(merge(t1,m),t2);
    }
    
    void erase(Key key) {
      auto [t1,t] = split(root, key, 0);
      auto [m,t2] = split(t, key, 1);
      root = merge(t1,t2);
      free(m);
    }
    Value getvalue(Key key){
        node *now = root;
        while(now){
            if(now->key > key){
                now = now->left;
            } else if(now->key < key){
                now = now->right;
            } else {
                return now->value;
            }
        }
        return 0;
    }
    Value operator[](Key key){
        return getvalue(key);
    }
};

int main(){ 
    Treap<int,int> treap;
    treap.insert(5,5);
    treap.insert(2,6);
    treap.insert(6,3);
    cout << treap.getvalue(5) << ' ' << treap[2] << endl;
    if(treap.contains(6)) cout << "Существует ключ 6." << endl;
}
