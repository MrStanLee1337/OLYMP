#include <iostream>
#include <utility>
#include <cstdlib>
using namespace std;
template <typename Key>
class Treap {
    
    struct node {
      Key x; int y;
      node *left=nullptr, *right=nullptr;
      node(Key x, int y) : x(x), y(y) {}
    };

    node *root=nullptr;
    pair<node*, node*> split(node* t, Key k, bool eq) {
        if (!t) return {nullptr,nullptr};
        if (k > t->x || eq && k == t->x) {
            auto [t1,t2]=split(t->right,k,eq);
            t->right=t1;
            return {t,t2};
        } else {
            auto [t1,t2]=split(t->left,k,eq);
            t->left=t2;
            return {t1,t};
        }
    }
    node* merge(node* t1, node* t2) {
        if(!t2) return t1;
        if(!t1) return t2;
        if (t1->y > t2->y) {
            t1->right=merge(t1->right,t2);
            return t1;
        } else {
            t2->left=merge(t1,t2->left);
            return t2;
        }
    }
    void free(node *t) {
        if(!t) return;
        free(t->left);
        free(t->right);
        delete t;
    }

public:
    Treap(){}
    ~Treap() { free(root); }
    bool contains(Key k) {
        node *p = root;
        while(p) { 
            if(p->x == k) return 1;
            else if(p->x > k) p = p->left;
            else p = p->right;
        }
        return 0;
    }
    void insert(Key k) {
        node *m = new node(k,rand());
        auto [t1,t2] = split(root,k,0);
        root = merge(merge(t1,m),t2);
    }
    void erase(Key k) {
        auto [t1,t] = split(root, k, 0);
        auto [m,t2] = split(t, k, 1);
        root = merge(t1,t2);
        free(m);
    }
};

int main(){ 
    Treap<int> t;
    t.insert(1);
    t.insert(7);
    t.insert(5);
    cout<<t.contains(5)<<"\n";
    cout<<t.contains(0)<<"\n";
    t.erase(5);
    cout<<t.contains(5)<<"\n";
    cout<<t.contains(7)<<"\n";
}
