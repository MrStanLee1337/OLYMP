#include <iostream>
#include <queue>
#include <map>
using namespace std;
int main(){
    int n,m;
    cin >> n >> m;
    int dx[4] = {1,-1,0,0};
    int dy[4] = {0,0,-1,1};
    char array[n][m];
    //char array[4][4] = {{'*', '#', '.', '.'}, {'.','.','.','*'}, {'.','#','#','.'}, {'.','.','.','#'}};
    int counter[n][m] = {};
    queue<pair<int, int>> qu;
    for(int i = 0; i < n; i++)
        for(int j = 0; j < m; j++)
            cin >> array[i][j];
    
    /*for(int i = 0; i < n; i++){
        for(int j = 0; j < m; j++){
            
            cout << counter[i][j] << ' ';
        }
        cout << endl;
    }*/
    
    for(int i = 0; i < n; i++){
        for(int j = 0; j < m; j++){
            if(array[i][j] == '*'){
                qu.push(make_pair(i,j));
                while(!qu.empty()){
                    pair<int,int> para = qu.front();
                    qu.pop();
                    for(int k = 0; k < 4; k++){
                        int ti,tj;
                        ti = para.first + dx[k];
                        tj = para.second + dy[k];
                        if(ti >= 0 && tj >= 0 && ti < n && tj < m && array[ti][tj] == '.'){
                            if(counter[ti][tj] == 0){
                                qu.push(make_pair(ti,tj));
                                counter[ti][tj] = counter[para.first][para.second] + 1;
                            } else if(counter[ti][tj] > counter[para.first][para.second] + 1) {
                                qu.push(make_pair(ti,tj));
                                counter[ti][tj] = counter[para.first][para.second] + 1;
                            }
                            
                            
                        }
                        
                    }
                }
                
            }
        }
    }
    int max = 0;
    for(int i = 0; i < n; i++){
        for(int j = 0; j < m; j++){
            if(max < counter[i][j]) max = counter[i][j];
            //cout << counter[i][j] << ' ';
        }
        //cout << endl;
    }
    cout << max;
    return 0;
}
